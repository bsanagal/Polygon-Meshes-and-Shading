[ Bhargav Ram Reddy ]
CS 428 - Project 2

=============================================================================
This is a template description file.  Please fill in by replacing the []'s
with relevant content (write a *single* sentence description for each method,
bug, extension, etc...).  Then, remove any leftover []'s.
=============================================================================

Incomplete parts:
-----------------
 
 
Bugs in code:
-------------


Extensions/extra credit completed:
----------------------------------
--> Implemented:
	torus
	wireframe drawn on top of the polygons - Opengl OFFSET command is used
	Phong model(but it doesn’t look as desired)

================================================================

Methods completed or changed (Java and GLSL)
--------------------------------------------

Ellipsoid.java
- evalPosition(): Computed ellipsoid position from u,v
- evalNormal():   Computed ellipsoid normal vector from u,v

ellipsoid.vp (GLSL)
- ellipsoidPosition(): Computed ellipsoid position from u,v
- ellipsoidNormal():   Computed ellipsoid normal vector from u,v
- main(): Used u(gl_Vertex[0]),v(gl_Vertex[1]) values sent by application to vertex processor to compute position and normal.

illum.fp (GLSL)
- toonShade(): Based on parameters toonhigh and toolow, constant values are chosen and replaced d(diffuse) value. Computed color(a+d+s) and it is returned
- main(): Computed diffuse shader value(surface normal dot light normal) and specular(surface normal dot halfway normal). Computed lighting per fragment
- phong model is also implemented (if phong model is checked while blinn phong model is on then the blinn phong shade will be changed to phong shade model)

PolyMesh.java
- computeAllNormals(): Computed polygon normals and vertex normals(area-weighted average of the polygon normals)

Shape.java
- draw(): All the drawing style methods are called
- drawPolygons(): Draw polygons in mesh, smooth shading if drwaSmooth option is selected else flat shading 
- drawWireframe(): Draw wireframe of mesh.  

Torus.java
- evalPosition(): Computed torus position from u,v
- evalNormal():   Computed torus normal vector from u,v

torus.vp (GLSL)
- torusPosition(): Computed torus position from u,v
- torusNormal():   Computed torus normal vector from u,v
- main(): Used u(gl_Vertex[0]),v(gl_Vertex[1]) values sent by application to vertex processor to compute position and normal.
 
